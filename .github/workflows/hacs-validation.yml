name: HACS Validation

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run validation weekly on Monday at 00:00 UTC
    - cron: "0 0 * * 0"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: HACS Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: HACS Validation
        uses: hacs/action@main
        with:
          category: integration
          ignore: brands
          check_docker: false

  python-lint:
    name: Python Lint Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort

      - name: Run Flake8
        run: |
          flake8 custom_components/cloud_inverter \
            --count \
            --select=E9,F63,F7,F82 \
            --show-source \
            --statistics
        continue-on-error: true

      - name: Run Black check
        run: |
          black --check custom_components/cloud_inverter
        continue-on-error: true

      - name: Run isort check
        run: |
          isort --check-only custom_components/cloud_inverter
        continue-on-error: true

  manifest-check:
    name: Manifest Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Validate manifest.json
        run: |
          python -m json.tool custom_components/cloud_inverter/manifest.json > /dev/null
          echo "✓ manifest.json is valid JSON"

      - name: Check manifest.json required fields
        run: |
          python << 'EOF'
          import json
          with open('custom_components/cloud_inverter/manifest.json', 'r') as f:
              manifest = json.load(f)
          
          required_fields = ['domain', 'name', 'codeowners', 'config_flow', 'documentation', 'version', 'requirements', 'homeassistant']
          missing_fields = [field for field in required_fields if field not in manifest]
          
          if missing_fields:
              print(f"✗ Missing required fields: {', '.join(missing_fields)}")
              exit(1)
          else:
              print("✓ All required fields present in manifest.json")
          EOF

  strings-check:
    name: Strings Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Validate strings.json
        run: |
          python -m json.tool custom_components/cloud_inverter/strings.json > /dev/null
          echo "✓ strings.json is valid JSON"

      - name: Check strings.json structure
        run: |
          python << 'EOF'
          import json
          with open('custom_components/cloud_inverter/strings.json', 'r') as f:
              strings = json.load(f)
          
          required_keys = ['config']
          missing_keys = [key for key in required_keys if key not in strings]
          
          if missing_keys:
              print(f"✗ Missing required keys: {', '.join(missing_keys)}")
              exit(1)
          else:
              print("✓ strings.json has correct structure")
          EOF

  file-structure-check:
    name: File Structure Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          echo "Checking required integration files..."
          
          required_files=(
            "custom_components/cloud_inverter/__init__.py"
            "custom_components/cloud_inverter/api.py"
            "custom_components/cloud_inverter/config_flow.py"
            "custom_components/cloud_inverter/const.py"
            "custom_components/cloud_inverter/sensor.py"
            "custom_components/cloud_inverter/manifest.json"
            "custom_components/cloud_inverter/strings.json"
            "custom_components/cloud_inverter/translations/en.json"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            else
              echo "✓ Found: $file"
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "✗ Missing required files:"
            for file in "${missing_files[@]}"; do
              echo "  - $file"
            done
            exit 1
          else
            echo "✓ All required files present"
          fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for credentials
        run: |
          echo "Scanning for exposed credentials..."
          
          # Check Python files
          if grep -r "password\|api_key\|secret\|token" custom_components/cloud_inverter/*.py | grep -v "CONF_PASSWORD\|CONF_USERNAME\|api\.token\|self\.token"; then
            echo "✗ Potential credentials found in Python files"
            exit 1
          fi
          
          echo "✓ No hardcoded credentials detected"

      - name: Check for debug code
        run: |
          echo "Checking for debug code..."
          
          if grep -r "print(" custom_components/cloud_inverter/*.py; then
            echo "⚠ Debug print() statements found (should use logging instead)"
          fi
          
          echo "✓ Debug check complete"

  readme-check:
    name: README Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if README exists
        run: |
          if [ ! -f "README.md" ]; then
            echo "✗ README.md not found"
            exit 1
          else
            echo "✓ README.md found"
          fi

      - name: Check README content
        run: |
          python << 'EOF'
          with open('README.md', 'r') as f:
              content = f.read()
          
          required_sections = ['Installation', 'Setup', 'Features']
          missing_sections = [section for section in required_sections if section.lower() not in content.lower()]
          
          if missing_sections:
              print(f"⚠ Missing recommended sections: {', '.join(missing_sections)}")
          else:
              print("✓ README has all recommended sections")
          EOF

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [validate, python-lint, manifest-check, strings-check, file-structure-check, security-check, readme-check]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Check job status
        run: |
          if [ "${{ needs.validate.result }}" != "success" ]; then
            echo "⚠ HACS validation had issues"
          fi
          
          if [ "${{ needs.file-structure-check.result }}" != "success" ]; then
            echo "✗ File structure check failed"
            exit 1
          fi
          
          if [ "${{ needs.security-check.result }}" != "success" ]; then
            echo "✗ Security check failed"
            exit 1
          fi
          
          echo "✓ All checks passed!"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const validate = '${{ needs.validate.result }}';
            const pylint = '${{ needs.python-lint.result }}';
            const manifest = '${{ needs.manifest-check.result }}';
            const strings = '${{ needs.strings-check.result }}';
            const structure = '${{ needs.file-structure-check.result }}';
            const security = '${{ needs.security-check.result }}';
            const readme = '${{ needs.readme-check.result }}';
            
            let comment = '## ✅ Validation Results\n\n';
            comment += `- HACS: ${validate === 'success' ? '✅' : '⚠'}\n`;
            comment += `- Python Lint: ${pylint === 'success' ? '✅' : '⚠'}\n`;
            comment += `- Manifest: ${manifest === 'success' ? '✅' : '❌'}\n`;
            comment += `- Strings: ${strings === 'success' ? '✅' : '❌'}\n`;
            comment += `- File Structure: ${structure === 'success' ? '✅' : '❌'}\n`;
            comment += `- Security: ${security === 'success' ? '✅' : '❌'}\n`;
            comment += `- README: ${readme === 'success' ? '✅' : '⚠'}\n`;
            
            if (structure !== 'success' || security !== 'success' || manifest !== 'success') {
              comment += '\n**Please fix the issues above before merging.**';
            } else {
              comment += '\n**All critical checks passed! ✨**';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
